module key_annotation {

  /*
   * Simplest Case of a Sample Struct with no Key
   * 0 Keys
   */
  @topic
  struct UnkeyedStruct {
    long value;
  };

  /*
   * Simple Case of a Sample Struct with One Simple Key
   * 1 Key
   *  - key
   */
  @topic
  struct SimpleKeyStruct {
    @key long key;
    long value;
  };

  /*
   * Case of a Nested Struct Key
   * 2 Keys
   *  - non_nested_key
   *  - nested_key.key
   */
  @topic
  struct NestedKeyStruct {
    @key long non_nested_key;
    @key SimpleKeyStruct nested_key;
  };

  /*
   * Using a Typedef of a Struct as a Key
   * 2 Keys
   *  - a_key_value
   *  - my_struct_typedef_key.key
   */
  typedef SimpleKeyStruct MyStructTypedef;
  @topic
  struct TypedefStructKeyStruct {
    @key long a_key_value;
    @key MyStructTypedef my_struct_typedef_key;
  };

  /*
   * Case of an Array of Primitives
   * 2 Keys
   *  - values[0]
   *  - values[1]
   */
  typedef long LongArray[2];
  @topic
  struct LongArrayStruct {
    @key LongArray values;
  };

  /*
   * Case of an Array of Structures
   * 2 Keys
   *  - values[0].key
   *  - values[0].key
   */
  typedef SimpleKeyStruct SimpleKeyStructArray[2];
  @topic
  struct SimpleKeyArray {
    @key SimpleKeyStructArray values;
  };

  /*
   * Case of a Unkeyed Standalone Topic Union
   * 0 Keys
   */
  @topic
  union UnkeyedUnion switch (long) {
  case 0:
    long a;
  case 5:
    char b;
  default:
    float c;
  };

  /*
   * Case of a Keyed Union
   * 1 Key
   *  - _d()
   */
  @topic
  union KeyedUnion switch (@key long) {
  case 0:
    long a;
  case 5:
    char b;
  default:
    float c;
  };

  /*
   * Case of a Keyed Union Nested inside a Struct
   * 2 Keys
   *  - value._d()
   *  - another_key
   */
  @topic
  struct KeyedUnionStruct {
    @key KeyedUnion value;
    @key long another_key;
  };

  /*
   * Struct with Multidimensional Array Keys
   * 2*3 + 2*3*4 (30) Keys
   *  - array1[0][0]
   *  - array1[0][1]
   *   ...
   *  - array1[1][2]
   *  - array2[0][0][0]
   *  - array2[0][0][1]
   *   ...
   *  - array2[1][2][3]
   */
  typedef short A_2D_Array_t[2][3];
  typedef short A_3D_Array_t[2][3][4];
  @topic
  struct MultidimensionalArrayStruct {
    @key A_2D_Array_t array1;
    @key A_3D_Array_t array2;
  };

  /*
   * Implied Keys
   * If a nested struct marked as a key has no keys, all the fields are implied
   * to be keys.
   */
  module ImpliedKeys {

    struct NoKeysStruct {
      short a;
      long b;
      float c;
    };

    struct OneKeyStruct {
      @key short a;
      long b;
      float c;
    };

    /*
     * Basic Usage
     * 5 keys
     *  - nested_no_keys.a
     *  - nested_no_keys.b
     *  - nested_no_keys.c
     *  - nested_one_key.a
     *  - non_nested
     */
    @topic
    struct StructA {
      @key NoKeysStruct nested_no_keys;
      @key OneKeyStruct nested_one_key;
      @key long non_nested;
    };

    /*
     * Make Sure This Works Recursively
     * 6 keys
     *  - as_key.nested_no_keys.a
     *  - as_key.nested_no_keys.b
     *  - as_key.nested_no_keys.c
     *  - as_key.nested_one_key.a
     *  - as_key.non_nested
     *  - yet_another_key
     */
    @topic
    struct StructB {
      @key StructA as_key;
      StructA not_as_key;
      @key long yet_another_key;
    };

    struct StructWithKeyFalse {
      short a;
      @key(FALSE) long b;
      float c;
    };

    /*
     * @key(FALSE) Amid Implied Keys
     * If there are fields that are marked with @key(FALSE) and none marked
     * with @key or @key(TRUE), then keys can still be implied, but it excludes
     * the fields that are marked with @key(FALSE).
     * 2 keys
     *  - as_key.a
     *  - as_key.c
     */
    @topic
    struct StructC {
      @key StructWithKeyFalse as_key;
      StructWithKeyFalse not_as_key;
    };

  };

};
