
# When there are a very large number of writers or reader being
# associated at the same time and the Implementation Repository is used
# for discovery a stack overflow may occur.

# The cause for this is that by default, while the ORB is waiting for a
# reply from an upstream request, it's also handling incoming requests.
# If a new request comes in it's placed on the stack above the first
# waiter and first waiter must wait for the second request to be
# processed even if the first reply is received. Of course the problem
# compounds if a third client request comes in while the second request
# is waiting. Add enough requests and the stack overflow happens.

# To get around this, a Thread Pool Strategy service object with a pool
# of one thread is used by the ORB using TAO's Custom Servant Dispatcher
# mechanism. This results in a thread that queues incoming requests and
# another that services them. Because of this the recursion is
# avoided. Below is the service configurator line that activates the
# Thread Pool Strategy service object.

dynamic TAO_CSD_TP_Strategy_Factory Service_Object * TAO_CSD_ThreadPool:_make_TAO_CSD_TP_Strategy_Factory() "-CSDtp RootPOA:1"
